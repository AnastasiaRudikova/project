// CONFIG3
#pragma config WPFP = WPFP511           // Write Protection Flash Page Segment Boundary (Highest Page (same as page 170))
#pragma config WPDIS = WPDIS            // Segment Write Protection Disable bit (Segmented code protection disabled)
#pragma config WPCFG = WPCFGDIS         // Configuration Word Code Page Protection Select bit (Last page(at the top of program memory) and Flash configuration words are not protected)
#pragma config WPEND = WPENDMEM         // Segment Write Protection End Page Select bit (Write Protect from WPFP to the last page of memory)

// CONFIG2
#pragma config POSCMOD = HS             // Primary Oscillator Select (HS oscillator mode selected)
#pragma config DISUVREG = OFF           // Internal USB 3.3V Regulator Disable bit (Regulator is disabled)
#pragma config IOL1WAY = ON             // IOLOCK One-Way Set Enable bit (Write RP Registers Once)
#pragma config OSCIOFNC = OFF           // Primary Oscillator Output Function (OSCO functions as CLKO (FOSC/2))
#pragma config FCKSM = CSDCMD           // Clock Switching and Monitor (Both Clock Switching and Fail-safe Clock Monitor are disabled)
#pragma config FNOSC = PRI           // Oscillator Select (Primary oscillator (XT, HS, EC) with PLL module (XTPLL,HSPLL, ECPLL))
#pragma config PLL_96MHZ = ON           // 96MHz PLL Disable (Enabled)
#pragma config PLLDIV = DIV5            // USB 96 MHz PLL Prescaler Select bits (Oscillator input divided by 5 (20MHz input))
#pragma config IESO = ON                // Internal External Switch Over Mode (IESO mode (Two-speed start-up) enabled)

// CONFIG1
#pragma config WDTPS = PS32768          // Watchdog Timer Postscaler (1:32,768)
#pragma config FWPSA = PR128            // WDT Prescaler (Prescaler ratio of 1:128)
#pragma config WINDIS = OFF             // Watchdog Timer Window (Standard Watchdog Timer enabled,(Windowed-mode is disabled))
#pragma config FWDTEN = OFF             // Watchdog Timer Enable (Watchdog Timer is disabled)
#pragma config ICS = PGx1               // Comm Channel Select (Emulator functions are shared with PGEC1/PGED1)
#pragma config GWRP = OFF               // General Code Segment Write Protect (Writes to program memory are allowed)
#pragma config GCP = OFF                // General Code Segment Code Protect (Code protection is disabled)
#pragma config JTAGEN = OFF             // JTAG Port Enable (JTAG port is disabled)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#define FOSC 32000000   
#define FCY  FOSC/2

#include <xc.h>
#include <stdio.h>
#include <stdlib.h>
#include <libpic30.h>
#include <p24FJ256GB110.h>
#include <xc.h>
#include <stdint.h>











unsigned char volatile kva=0;

void __attribute__ ((interrupt, no_auto_psv )) _CNInterrupt(void)
{
    kva++;
    if(kva>100)
    {
        LATAbits.LATA6=!LATAbits.LATA6;
        kva=0;
    }
    IFS1bits.CNIF = 0;
}

void ENC_INIT(){
    AD1PCFG = 0xffff; //turn off ADC PORTB
    TRISAbits.TRISA6=0;
    TRISBbits.TRISB4=1;
    CNEN1bits.CN6IE= 1;
    CNPU1bits.CN6PUE=1;
    CNEN1bits.CN7IE= 1;
    CNPU1bits.CN7PUE=1;
    IFS1bits.CNIF=0;
    IEC1bits.CNIE=1;
}









void UART_INIT(void)
{
    RPINR18bits.U1RXR = 38; //RX RC1
    RPOR1bits.RP3R=3; //TX  RD10
    //MODE
    U1MODEbits.UARTEN = 1;
    U1MODEbits.BRGH=0;
    //STATUS
    U1STAbits.UTXEN = 1;
    U1BRG = 103;
    IEC0bits.U1RXIE = 1;
}

void put_char(char i) //otpravka data po UART
{
   while(U1STAbits.UTXBF==1); //Ojidanie gotovnosti dlya otpravki
   U1TXREG = i; //Otpravka data
}

uint8_t flag=0; //Flag prinyatosti data
uint8_t i=0;    //Syda zapisivaetcya prinyataya data

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) //Interrupt by taking data
{
    IFS0bits.U1RXIF = 0; //Flag to 0
    if(flag==0) //UDP for postoyannii priem
    {
        flag=1;
        i=U1RXREG; //schitivanie data
    }
}








void motor(unsigned char com)
{  
    com = com-48;   //from ASCII to normal number
    if(com<9)       //mi prinimaem znachenie ot 0 do 8
    {
        unsigned char commands[18]={0,0,1,128,64,128,127,128,64,255,127,255,127,192,1,255,1,192}; //massive commands
        put_char(commands[com*2]);
        __delay_ms(50);
        put_char(commands[com*2+1]);
        __delay_ms(50);
    }
}





///////////////////////// IC

void timer45_init(void)
{
    T4CONbits.TCKPS = 0b01;
    ////
    T5CONbits.TCKPS = 0b01;
}

void IC_init(void)
{
    ////
    RPINR7bits.IC1R = 18; //RB5
    IFS0bits.IC1IF = 0; 
    IC1CON1bits.ICM = 0b001; // capture rising and falling edge
    ////
    RPINR7bits.IC2R = 28; //RB4
    IFS0bits.IC2IF = 0;
    IC2CON1bits.ICM = 0b001; // capture rising and falling edge
}

void __attribute__((__interrupt__, auto_psv)) _IC1Interrupt(void)
{
    IFS0bits.IC1IF = 0; 
    LATAbits.LATA6=1;
}

void __attribute__((__interrupt__, auto_psv)) _IC2Interrupt(void)
{
    IFS0bits.IC2IF = 0; //flag of interrupt
    LATAbits.LATA6=1;
}









int main(int argc, char** argv) 
{
    TRISAbits.TRISA6=0;
    UART_INIT();
   
    while(1)
    {  

        put_char(128);    
        put_char(1);

    } 
}
