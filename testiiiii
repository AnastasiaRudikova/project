/* 
 * File:   UART.c
 * Author: user
 *
 * Created on 7 мая 2018 г., 15:33
 */

// CONFIG3
#pragma config WPFP = WPFP511           // Write Protection Flash Page Segment Boundary (Highest Page (same as page 170))
#pragma config WPDIS = WPDIS            // Segment Write Protection Disable bit (Segmented code protection disabled)
#pragma config WPCFG = WPCFGDIS         // Configuration Word Code Page Protection Select bit (Last page(at the top of program memory) and Flash configuration words are not protected)
#pragma config WPEND = WPENDMEM         // Segment Write Protection End Page Select bit (Write Protect from WPFP to the last page of memory)

// CONFIG2
#pragma config POSCMOD = HS            // Primary Oscillator Select (HS oscillator mode selected)
#pragma config DISUVREG = OFF           // Internal USB 3.3V Regulator Disable bit (Regulator is disabled)
#pragma config IOL1WAY = ON             // IOLOCK One-Way Set Enable bit (Write RP Registers Once)
#pragma config OSCIOFNC = ON            // Primary Oscillator Output Function (OSCO functions as port I/O (RC15))
#pragma config FCKSM = CSDCMD           // Clock Switching and Monitor (Both Clock Switching and Fail-safe Clock Monitor are disabled)
#pragma config FNOSC = PRI              // Oscillator Select (Primary oscillator (XT, HS, EC))
#pragma config PLL_96MHZ = ON           // 96MHz PLL Disable (Enabled)
#pragma config PLLDIV = DIV12           // USB 96 MHz PLL Prescaler Select bits (Oscillator input divided by 12 (48MHz input))
#pragma config IESO = ON                // Internal External Switch Over Mode (IESO mode (Two-speed start-up) enabled)

// CONFIG1
#pragma config WDTPS = PS32768          // Watchdog Timer Postscaler (1:32,768)
#pragma config FWPSA = PR128            // WDT Prescaler (Prescaler ratio of 1:128)
#pragma config WINDIS = OFF             // Watchdog Timer Window (Standard Watchdog Timer enabled,(Windowed-mode is disabled))
#pragma config FWDTEN = OFF             // Watchdog Timer Enable (Watchdog Timer is disabled)
#pragma config ICS = PGx2               // Comm Channel Select (Emulator functions are shared with PGEC1/PGED1)
#pragma config GWRP = OFF               // General Code Segment Write Protect (Writes to program memory are allowed)
#pragma config GCP = OFF                // General Code Segment Code Protect (Code protection is disabled)
#pragma config JTAGEN = OFF              // JTAG Port Enable (JTAG port is enabled)

#define FOSC 32000000 
#define FCY FOSC/2 


#include <stdio.h>
#include <stdlib.h>
#include <xc.h>
#include <stdint.h>
#include <libpic30.h>

void UART_INIT(void)
{
    RPINR18bits.U1RXR = 38; //RX RC1
    RPOR1bits.RP3R=3; //TX  RD10
    //MODE
    U1MODEbits.UARTEN = 1;
    U1MODEbits.BRGH=1;
    //STATUS
    U1STAbits.UTXEN = 1;
    U1BRG = 34; //9600 baud rate
    IEC0bits.U1RXIE = 1;
}
void put_char(char i)
{
   while(U1STAbits.UTXBF==1);
   U1TXREG = i;
}

uint8_t flag=0;
uint8_t flag1=0;
uint8_t i=4;

void __attribute__((__interrupt__, auto_psv)) _U1RXInterrupt(void)
{
    IFS0bits.U1RXIF = 0;
    if(flag1==0)
    {
        flag=1;
        i=U1RXREG;
    }
    flag1=1; //Запрет считывания
//  IEC0bits.U1RXIE = 0;
}


void initPWM1(){
 TRISFbits.TRISF13 = 0;         // output PF13-PRP31
 RPOR15bits.RP31R = 18;          
 PR1 = 40000;       //period timer
 //OC1R = 2000;
 OC1RS = PR1 ;       //period PWM 
 OC1CON2bits.SYNCSEL = 0b01011; //timer1
 OC1CON2bits.OCTRIG = 0;        //sync select bit
 OC1CON1bits.OCTSEL = 0b100;    //output system clock
 OC1CON1bits.OCM = 0b110;       //PWM mode on
 T1CONbits.TCKPS0  = 0b01;      //prescale 1:8
// T1CONbits.TON = 1;             //start 16-bit timer1
}

void readPWM1(int speed){
OC1R = speed;
T1CONbits.TON = 1;             //start 16-bit timer1
}

void initPWM2(){ 
 TRISFbits.TRISF2 = 0;         // output PF2-PRP30
 RPOR15bits.RP30R = 19;           
 PR2 = 40000;       //period timer
 //OC2R = 2000;
 OC2RS = PR2 ;       //period PWM 
 OC2CON2bits.SYNCSEL = 0b01011; //timer2
 OC2CON2bits.OCTRIG = 0;        //sync select bit
 OC2CON1bits.OCTSEL = 0b100;    //output system clock
 OC2CON1bits.OCM = 0b110;       //PWM mode on
 T2CONbits.TCKPS0  = 0b01;      //prescale 1:8
 //T2CONbits.TON = 1;             //start 16-bit timer2
}

void readPWM2(int speed){
OC2R = speed;
T2CONbits.TON = 1;             //start 16-bit timer2
}

//void read_motor(void)
//{
//    T2CONbits.TON = 0;
//    T1CONbits.TON = 0; 
//    RPOR15bits.RP30R = 0; 
//     RPOR15bits.RP31R = 0; 
//    TRISFbits.TRISF13 = 1; 
//    TRISFbits.TRISF2 = 1; 
//}
void vpravo_na_meste(int speed)
{
    TRISFbits.TRISF13 = 0;         // output PF13-PRP31
    RPOR15bits.RP31R = 18;    
    RPOR15bits.RP30R = 0;
    PR1 = 40000;       //period timer
    OC1R = speed;
    OC1RS = PR1 ;       //period PWM 
    OC1CON2bits.SYNCSEL = 0b01011; //timer1
    OC1CON2bits.OCTRIG = 0;        //sync select bit
    OC1CON1bits.OCTSEL = 0b100;    //output system clock
    OC1CON1bits.OCM = 0b110;       //PWM mode on
    T1CONbits.TCKPS0  = 0b01;      //prescale 1:8
    T1CONbits.TON = 1;
    while(1)
    {
          TRISFbits.TRISF2 = 0;
          
    }
}

//void vvlevo_na_meste(int speed)
//{
//    TRISFbits.TRISF2 = 0;         // output PF2-PRP30
//    RPOR15bits.RP30R = 19;     
//    RPOR15bits.RP31R = 0;
//    PR2 = 40000;       //period timer
//    OC2R = 2000;
//    OC2RS = PR2 ;       //period PWM 
//    OC2CON2bits.SYNCSEL = 0b01011; //timer2
//    OC2CON2bits.OCTRIG = 0;        //sync select bit
//    OC2CON1bits.OCTSEL = 0b100;    //output system clock
//    OC2CON1bits.OCM = 0b110;       //PWM mode on
//    T2CONbits.TCKPS0  = 0b01;      //prescale 1:8
//    T2CONbits.TON = 1; 
//    while(i==4)
//    {
//          TRISFbits.TRISF13 = 1;   
//    }
//}

int main(int argc, char** argv) 
{
//    TRISFbits.TRISF13=1;
//    TRISFbits.TRISF2=1;
//    __delay_ms(2000);
//    TRISFbits.TRISF13=1;
//    TRISFbits.TRISF2=0;
//    __delay_ms(2000);
//    TRISFbits.TRISF13=0;
//    TRISFbits.TRISF2=1;
//    __delay_ms(2000);
//    TRISFbits.TRISF13=0;
//    TRISFbits.TRISF2=0;
//    __delay_ms(2000);
//    TRISFbits.TRISF13=1;
//    TRISFbits.TRISF2=1;
//    __delay_ms(2000);
//    char adress=130;
//    char command=0;
//    char speed=64;
//    char t=66;
//    int y=0;
//    UART_INIT();
//    TRISEbits.TRISE7=0;
//    LATEbits.LATE7=1;
//
//    __delay_ms(3000);
//    put_char(170);
//    LATEbits.LATE7=0;
    vpravo_na_meste(2000);
    while(1)
  {

        
//        put_char(adress);
//        put_char(command);
//        put_char(speed);
//        put_char(t);
        // меньше 128 - правый от драйвера
    }
    
//    return (EXIT_SUCCESS);
}
